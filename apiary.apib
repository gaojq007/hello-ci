FORMAT: 1A

HOST: http://api.caicloud.io/

# Cyclone

Cyclone is a cloud native CI/CD platform built for container workflow.

# Group Jobs Management

Jobs Management (CRUD)

## Collection [/users/{user_id}/jobs]

### List all jobs [GET]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer

+ Response 200 (application/json)

            {
                "jobs": [
                    {
                        "_id": "string",
                        "user_id": "string",
                        "deploy_id": "string",
                        "name": "string",
                        . . .
                    },
                    {
                        "_id": "string",
                        "user_id": "string",
                        "deploy_id": "string",
                        "name": "string",
                        . . .
                    },  
                ]
            }

### Create new job [POST]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer

+ Request (application/json)
 
            {
                "user_id": "string",
                "deploy_id": "string",
                "name": "string",
                "username": "string",
                "description": "string",
                "build_path": "string",
                . . .
            }

+ Response 202 (application/json)
 
     + Headers
 
     + Body
 
             {
                 "id": "string"
             }
 
+ Response 409 (application/json)
 
     + Body
             
             {
                 "message": "string"
             }

## Element [/users/{user_id}/jobs/{job_id}]
 
### Get a specific job info with job id and user id [GET]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer
    + job_id:`1` (number, required) - ID of the job in the form of an integer

+ Response 200 (application/json)
 
         {
            "_id": "string",
            "user_id": "string",
            "deploy_id": "string",
            "name": "string",
             ...
         }
 
+ Response 404 (application/json)
 
         {
             "message": "string"
         }
 
### Update a specific service [PUT]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer
    + job_id:`1` (number, required) - ID of the job in the form of an integer
 
+ Request (application/json)
 
        {
            "deploy_id": "string",
            "name": "string",
                ...
        }
 
+ Response 201 (application/json)
 
     + Headers
 
     + Body
 
             {
                "_id": "string",
                "user_id": "string",
                "deploy_id": "string",
                "name": "string",
                 ...
             }
 
+ Response 409 (application/json)
 
     + Body
             
             {
                 "message": "string"
             }
 
### Delete a specific service [DELETE]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer
    + job_id:`1` (number, required) - ID of the job in the form of an integer

+ Request (text/plain)

+ Response 204 (application/json)

    + Headers

+ Response 404 (application/json)

     + Headers

     + Body

            {
                "message": "string"
            }


# Group Builds Management

Builds Management 

## Collections [/users/{user_id}/jobs/{job_id}/versions]

### List versions [GET]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer
    + job_id:`1` (number, required) - ID of the version in the form of an integer

+ Response 200 (application/json)

            {
                "versions": [
                    {
                        "_id": "string",
                        "service_id": "string",
                        "service_name": "string",
                        "version_log_id": "string",
                        . . .
                    },
                    {
                        "_id": "string",
                        "service_id": "string",
                        "service_name": "string",
                        "version_log_id": "string",
                        . . .
                    },  
                ]
            }


### Create new version [POST]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer

+ Request (application/json)
 
            {
                "job_id": "string",
                "job_name": "string",
                "name": "string",
                . . .
            }

+ Response 201 (application/json)
 
     + Headers
 
     + Body
 
             {
                 "id": "string"
             }
 
+ Response 409 (application/json)
 
     + Body
             
             {
                 "message": "string"
             }

## Element [/users/{user_id}/jobs/{job_id}/builds{build_id}]
 
### Get a specific build info with build id [GET]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer
    + build_id:`1` (number, required) - ID of the build in the form of an integer

+ Response 200 (application/json)
 
         {
            "_id": "string",
            "job_id": "string",
            "job_name": "string",
             ...
         }
 
+ Response 404 (application/json)
 
         {
             "message": "string"
         }
 
### cancel a specific build [PATCH]

Cancel a version build

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer
    + job_id:`1` (number, required) - ID of the job in the form of an integer
    + build_id:`1` (number, required) - ID of the service in the form of an integer

+ Request (text/plain)

+ Response 204 (application/json)

    + Headers

+ Response 404 (application/json)

     + Headers

     + Body

            {
                "message": "string"
            }

## Version Logs [/{user_id}/versions/{version_id}/logs]
 
### Get a specific log info with version id [GET]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer
    + version_id:`1` (number, required) - ID of the version in the form of an integer

+ Response 200 (application/json)
 
         {
            {
                "logs": "string"
            }
            ...
         }

+ Response 404 (application/json)
 
         {
             "message": "string"
         }

# Group Resources Management

Resources Management 

## Element [/{user_id}/resources]
 
### Get a specific recource info with user id [GET]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer

+ Response 200 (application/json)
 
         {
            "user_id": "string",
            "total_resource": {
                "memory": 0,
                "cpu": 0
            },
            ...
         }

+ Response 404 (application/json)
 
         {
             "message": "string"
         }
 
### Update a specific resource [PUT]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer

+ Request (application/json)
 
        {
            "user_id": "string",
            "total_resource": {
                "memory": 0,
                "cpu": 0
            },
            ...
        }
 
+ Response 201 (application/json)
 
     + Headers
 
     + Body
 
             {
                "user_id": "string",
                "total_resource": {
                    "memory": 0,
                    "cpu": 0
                },
                 ...
             }
 
+ Response 409 (application/json)
 
     + Body
             
             {
                 "message": "string"
             }


# Group Deploys Management

Deploys Management 

## Collection [/{user_id}/deploys]

### Create new deploy [POST]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer

+ Request (application/json)
 
            {
                "deploy_plans": [
                    {
                        "plan_name": "string",
                        "config": {
                            "cluster_name": "string",
                            "cluster_id": "string",
                            "partition": "string",
                            "application": "string",
                            "containers": [
                                "string"
                            ]
                        }
                    }
                ]
                . . .
            }

+ Response 201 (application/json)
 
     + Headers
 
     + Body
 
             {
                 "id": "string"
             }
 
+ Response 409 (application/json)
 
     + Body
             
             {
                 "message": "string"
             }

## Element [/{user_id}/deploys/{deploy_id}]
 
### Get a specific deploy info with user id [GET]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer
    + deploy_id:`1` (number, required) - ID of the deploy in the form of an integer

+ Response 200 (application/json)
 
         {
            "service_id": "string",
            "deploy_plans": [
                {
                    "plan_name": "string",
                    "config": {
                        "cluster_name": "string",
                        "cluster_id": "string",
                        "partition": "string",
                        "application": "string",
                        "containers": [
                        "string"
                        ]
                    }
                }
            ]
            ...
         }

+ Response 404 (application/json)
 
         {
             "message": "string"
         }
 
### Delete a specific deploy [DELETE]

+ Parameters
    + user_id:`1` (number, required) - ID of the user in the form of an integer
    + deploy_id:`1` (number, required) - ID of the deploy in the form of an integer

+ Request (text/plain)

+ Response 204 (application/json)

    + Headers

+ Response 404 (application/json)

     + Headers

     + Body

            {
                "message": "string"
            }